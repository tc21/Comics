using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace Comics
{
    public class Comic : INotifyPropertyChanged
    {
        private readonly string title;
        private readonly string author;
        private readonly string category;
        private readonly string path;
        private readonly string imagePath;

        public string UniqueIdentifier { get { return "[" + author + "]" + title; } }
        public string ImagePath { get { return imagePath; } }
        // The thumbnail and metadata files are not to be generated by the Comic class itself (for performance reasons)
        public string ThumbnailPath { get { return Path.Combine(Defaults.UserThumbnailsFolder, UniqueIdentifier + ".jpgthumbnail"); } }
        public string MetadataPath { get { return Path.Combine(Defaults.UserMetadataFolder, UniqueIdentifier + ".xmlmetadata"); } }

        private Metadata metadata;

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public Comic(string title, string author, string category, string path)
        {
            this.title = title;
            this.author = author;
            this.category = category;
            this.path = path;
            if (!LoadMetadata())
                metadata = new Metadata();

            FileInfo[] files = new DirectoryInfo(path).GetFiles("*.*");

            foreach (FileInfo file in files)
            {
                string suffix = Path.GetExtension(file.Name).ToLowerInvariant();
                if (Defaults.ImageSuffixes.Contains(suffix))
                {
                    imagePath = file.FullName;
                    break;
                }
            }
        }

        public SortedString Title
        {
            get { return metadata.Title ?? new SortedString(title); }
            set { metadata.Title = value; SaveMetadata(); NotifyPropertyChanged(); }
        }

        public SortedString Author
        {
            get { return metadata.Author ?? new SortedString(author); }
            set { metadata.Author = value; SaveMetadata(); NotifyPropertyChanged(); }
        }

        public SortedString Category
        {
            get { return metadata.Category ?? new SortedString(category); }
            set { metadata.Category = value; SaveMetadata(); NotifyPropertyChanged(); }
        }

        public bool Loved
        {
            get { return metadata.Loved; }
            set { metadata.Loved = value; SaveMetadata(); NotifyPropertyChanged(); }
        }

        public bool Disliked
        {
            get { return metadata.Disliked; }
            set { metadata.Disliked = value; SaveMetadata(); NotifyPropertyChanged(); }
        }
        
        // Calls Process.Start on ThumbnailPath.
        // Maybe I will eventually code a viewer into this program, but I already have an image viewer.
        public void OpenWithDefaultApplication()
        {
            Process.Start(ImagePath);
        }

        public void OpenContainingFolder()
        {
            Process.Start(path);
        }

        public bool MatchesSearchText(string searchText)
        {
            if (String.IsNullOrWhiteSpace(searchText))
                return true;

            searchText = searchText.ToLowerInvariant();
            return Title.Display.ToLowerInvariant().Contains(searchText) ||
                Title.Sort.ToLowerInvariant().Contains(searchText) ||
                Author.Display.ToLowerInvariant().Contains(searchText) ||
                Author.Sort.ToLowerInvariant().Contains(searchText);
        }

        public bool MatchesCategories(ISet<string> categories)
        {
            return categories.Count == 0 || categories.Contains(Category.Display);
        }

        public bool MatchesAuthors(ISet<string> authors)
        {
            return authors.Count == 0 || authors.Contains(Author.Display);
        }
        
        public static readonly List<string> SortPropertyNames = new List<string> { "Author", "Title", "Category" };
        public static List<string> SortDescriptionPropertyNamesForIndex(int index)
        {
            List<string> sortPropertyNames = new List<string>(SortPropertyNames);
            if (index > 0 && index < sortPropertyNames.Count)
            {
                string preferredProperty = sortPropertyNames[index];
                sortPropertyNames.RemoveAt(index);
                sortPropertyNames.Insert(0, preferredProperty);
            }
            return sortPropertyNames;
        }

        public void SaveMetadata()
        {
            XmlSerializer writer = new XmlSerializer(typeof(Metadata));
            string path = Path.Combine(Defaults.UserMetadataFolder, MetadataPath);
            string tempPath = path + ".tmp";

            using (FileStream tempFile = File.Create(tempPath))
                writer.Serialize(tempFile, metadata);

            if (File.Exists(path))
                File.Delete(path);

            File.Move(tempPath, path);
        }

        public bool LoadMetadata()
        {
            Metadata profile;
            XmlSerializer reader = new XmlSerializer(typeof(Metadata));
            string path = Path.Combine(Defaults.UserMetadataFolder, MetadataPath);

            if (!File.Exists(path))
                return false;

            using (StreamReader file = new StreamReader(path))
                profile = (Metadata)reader.Deserialize(file);

            metadata = profile;
            return true;
        }
    }

    public class Metadata
    {
        public SortedString Title { get; set; }
        public SortedString Author { get; set; }
        public SortedString Category { get; set; }
        public bool Loved { get; set; }
        public bool Disliked { get; set; }
    }

    public class SortedString : IComparable {
        public string Display { get; set; }
        public string Sort { get; set; }

        public SortedString() { }

        public SortedString(string display, string sort)
        {
            Display = display;
            Sort = sort;
        }

        public SortedString(string display) : this(display, display) { }

        public override string ToString()
        {
            return Display.ToString();
        }

        public override bool Equals(object obj)
        {
            if (obj is SortedString)
                return Sort.Equals(((SortedString)obj).Sort);

            return Sort.Equals(obj);
        }

        public override int GetHashCode()
        {
            return Sort.GetHashCode();
        }

        public int CompareTo(object other)
        {
            if (other is SortedString)
                return Sort.CompareTo(((SortedString)other).Sort);

            return Sort.CompareTo(other);
        }
    }
}
