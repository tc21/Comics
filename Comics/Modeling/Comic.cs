using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace Comics
{
    public class Comic : INotifyPropertyChanged
    {
        private readonly string title;
        private readonly string author;
        private readonly string category;
        private readonly string path;
        private readonly string imagePath;

        private string UniqueIdentifier { get { return "[" + author + "]" + title; } }
        public string ImagePath { get { return imagePath; } }
        // The thumbnail and metadata files are not to be generated by the Comic class itself (for performance reasons)
        public string ThumbnailPath { get { return Path.Combine(Defaults.UserThumbnailsFolder, UniqueIdentifier + ".jpgthumbnail"); } }
        public string MetadataPath { get { return Path.Combine(Defaults.UserMetadataFolder, UniqueIdentifier + ".xmlmetadata"); } }

        private Metadata metadata;

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public Comic(string title, string author, string category, string path)
        {
            this.title = title;
            this.author = author;
            this.category = category;
            this.path = path;
            if (!LoadMetadata())
                metadata = new Metadata();

            FileInfo[] files = new DirectoryInfo(path).GetFiles("*.*");

            foreach (FileInfo file in files)
            {
                string suffix = Path.GetExtension(file.Name).ToLowerInvariant();
                if (Defaults.ImageSuffixes.Contains(suffix))
                {
                    imagePath = file.FullName;
                    break;
                }
            }
        }

        public string DisplayTitle
        {
            get { return metadata.DisplayTitle ?? title; }
            set { metadata.DisplayTitle = value; SaveMetadata(); NotifyPropertyChanged(); }
        }
        public string SortTitle
        {
            get { return metadata.SortTitle ?? title; }
            set { metadata.SortTitle = value; SaveMetadata(); }
        }
        public string DisplayAuthor
        {
            get { return metadata.DisplayAuthor ?? author; }
            set { metadata.DisplayAuthor = value; SaveMetadata(); NotifyPropertyChanged(); }
        }
        public string SortAuthor
        {
            get { return metadata.SortAuthor ?? author; }
            set { metadata.SortAuthor = value; SaveMetadata(); }
        }
        public string DisplayCategory
        {
            get { return metadata.DisplayCategory ?? category; }
            set { metadata.DisplayCategory = value; SaveMetadata(); NotifyPropertyChanged(); }
        }
        public string SortCategory
        {
            get { return metadata.SortCategory ?? category; }
            set { metadata.SortCategory = value; SaveMetadata(); }
        }
        public bool Loved
        {
            get { return metadata.Loved; }
            set { metadata.Loved = value; SaveMetadata(); NotifyPropertyChanged(); }
        }
        public bool Disliked
        {
            get { return metadata.Disliked; }
            set { metadata.Disliked = value; SaveMetadata(); NotifyPropertyChanged(); }
        }

        // Calls Process.Start on ThumbnailPath.
        // Maybe I will eventually code a viewer into this program, but I already have an image viewer.
        public void OpenWithDefaultApplication()
        {
            Process.Start(ImagePath);
        }

        public void OpenContainingFolder()
        {
            Process.Start(path);
        }

        public bool MatchesSearchText(string searchText)
        {
            searchText = searchText.ToLowerInvariant();
            return DisplayTitle.ToLowerInvariant().Contains(searchText) ||
                SortTitle.ToLowerInvariant().Contains(searchText) ||
                DisplayAuthor.ToLowerInvariant().Contains(searchText) ||
                SortAuthor.ToLowerInvariant().Contains(searchText);
        }

        public static List<string> SortDescriptionPropertyNamesForIndex(int index)
        {
            List<String> propertyNames = new List<String> { "SortAuthor", "SortTitle", "SortCategory" };
            if (index < propertyNames.Count)
            {
                String preferredProperty = propertyNames[index];
                propertyNames.RemoveAt(index);
                propertyNames.Insert(0, preferredProperty);
            }
            return propertyNames;
        }

        public void SaveMetadata()
        {
            XmlSerializer writer = new XmlSerializer(typeof(Metadata));
            string path = Path.Combine(Defaults.UserMetadataFolder, MetadataPath);
            string tempPath = path + ".tmp";

            using (FileStream tempFile = File.Create(tempPath))
                writer.Serialize(tempFile, metadata);

            if (File.Exists(path))
                File.Delete(path);

            File.Move(tempPath, path);
        }

        public bool LoadMetadata()
        {
            Metadata profile;
            XmlSerializer reader = new XmlSerializer(typeof(Metadata));
            string path = Path.Combine(Defaults.UserMetadataFolder, MetadataPath);

            if (!File.Exists(path))
                return false;

            using (StreamReader file = new StreamReader(path))
                profile = (Metadata)reader.Deserialize(file);

            metadata = profile;
            return true;
        }
    }

    public class Metadata
    {
        public string DisplayTitle { get; set; }
        public string SortTitle { get; set; }
        public string DisplayAuthor { get; set; }
        public string SortAuthor { get; set; }
        public string DisplayCategory { get; set; }
        public string SortCategory { get; set; }
        public bool Loved { get; set; }
        public bool Disliked { get; set; }
    }
}
